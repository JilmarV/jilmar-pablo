name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: SSH Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST_NAME: ${{ secrets.SSH_HOST }}
          USER_NAME: ${{ secrets.USER_NAME }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
          GIT_REPO: ${{ secrets.GIT_REPO }}
        run: |
          # Mostrar que empieza el deployment
          echo "ðŸ”‘ Configurando SSH..."

          # Crear la carpeta .ssh
          mkdir -p ~/.ssh

          # Guardar la clave privada
          echo "$PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Agregar el host al archivo known_hosts para evitar preguntas interactivas
          ssh-keyscan -H "$HOST_NAME" >> ~/.ssh/known_hosts

          echo "ðŸš€ ConectÃ¡ndose al servidor..."

          # Entrar al servidor y ejecutar comandos
          ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "$USER_NAME@$HOST_NAME" << 'EOF'
            set -e  # Detener si algÃºn comando falla
            set -x  # Mostrar cada comando que se ejecuta (depuraciÃ³n)

            echo "ðŸ“‚ Verificando proyecto en el servidor..."

            # Si el proyecto no existe, clonarlo
            if [ ! -d "$PROJECT_PATH/.git" ]; then
              echo "âš¡ Proyecto no encontrado. Clonando..."
              mkdir -p "$(dirname "$PROJECT_PATH")"
              git clone "$GIT_REPO" "$PROJECT_PATH"
            fi

            # Entrar en la carpeta del proyecto
            cd "$PROJECT_PATH"

            # Asegurarse de estar en main y sincronizar cambios
            echo "ðŸ”„ Actualizando repositorio..."
            git fetch origin main
            git checkout main
            git reset --hard origin/main
            git pull origin main
EOF
